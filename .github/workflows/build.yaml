name: Smart Build and Release
on:
    push:
        branches:
            - master
            - main
    workflow_dispatch:

env:
    REPOSITORY: 'quay-its.epfl.ch'
    APP_NAME: 'wp-veritas'
    REGISTRY_PATH: 'quay-its.epfl.ch/svc0041/wp-veritas'

jobs:
    code-quality:
        name: Code Quality Check
        runs-on: ubuntu-24.04
        permissions:
            contents: read
            checks: write
            pull-requests: write
        outputs:
            eslint_passed: ${{ steps.eslint_check.outputs.passed }}
            has_errors: ${{ steps.eslint_check.outputs.has_errors }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: 'npm'

            - name: Install dependencies
              run: |
                  echo "üì¶ Installing dependencies..."
                  npm ci --legacy-peer-deps

            - name: Run ESLint with annotations
              id: eslint_check
              run: |
                  echo "üîç Running ESLint analysis..."
                  
                  mkdir -p eslint-results
                  
                  set +e
                  
                  npm run lint -- --format json --output-file eslint-results/results.json
                  ESLINT_EXIT_CODE=$?
                  
                  echo "üìã ESLint Console Output:"
                  npm run lint -- --format stylish
                  
                  if [ -f "eslint-results/results.json" ]; then
                    echo "üìä Processing ESLint results for GitHub annotations..."
                    
                    GITHUB_WORKSPACE_RELATIVE=$(pwd)
                    
                    ERROR_COUNT=$(jq '[.[] | .messages[] | select(.severity == 2)] | length' eslint-results/results.json)
                    WARNING_COUNT=$(jq '[.[] | .messages[] | select(.severity == 1)] | length' eslint-results/results.json)
                    TOTAL_FILES=$(jq '[.[] | select(.messages | length > 0)] | length' eslint-results/results.json)
                    
                    echo "üìà ESLint Summary:"
                    echo "  - Files with issues: $TOTAL_FILES"
                    echo "  - Errors: $ERROR_COUNT"
                    echo "  - Warnings: $WARNING_COUNT"
                    
                    # D√©finir les outputs pour les autres jobs
                    if [ "$ERROR_COUNT" -gt 0 ]; then
                      echo "has_errors=true" >> $GITHUB_OUTPUT
                      echo "passed=false" >> $GITHUB_OUTPUT
                    else
                      echo "has_errors=false" >> $GITHUB_OUTPUT
                      echo "passed=true" >> $GITHUB_OUTPUT
                    fi
                                        
                  else
                    echo "::error title=üí• ESLint Configuration Error::Failed to generate ESLint results - check your ESLint configuration"
                    echo "passed=false" >> $GITHUB_OUTPUT
                    echo "has_errors=true" >> $GITHUB_OUTPUT
                  fi
                  
                  if [ "$ERROR_COUNT" -gt 0 ] || [ "$ESLINT_EXIT_CODE" -eq 2 ]; then
                    echo "‚ùå ESLint found $ERROR_COUNT error(s) - stopping the pipeline"
                    exit 1
                  else
                    echo "‚úÖ ESLint completed - continuing with warnings if any"
                    exit 0
                  fi

            - name: Create ESLint Summary
              if: always()
              run: |
                  if [ -f "eslint-results/results.json" ]; then
                    ERROR_COUNT=$(jq '[.[] | .messages[] | select(.severity == 2)] | length' eslint-results/results.json)
                    WARNING_COUNT=$(jq '[.[] | .messages[] | select(.severity == 1)] | length' eslint-results/results.json)
                    TOTAL_FILES=$(jq '[.[] | select(.messages | length > 0)] | length' eslint-results/results.json)
                    CLEAN_FILES=$(jq '[.[] | select(.messages | length == 0)] | length' eslint-results/results.json)
                    
                    echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
                    echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
                    echo "| üî¥ Errors | $ERROR_COUNT |" >> $GITHUB_STEP_SUMMARY
                    echo "| üü° Warnings | $WARNING_COUNT |" >> $GITHUB_STEP_SUMMARY
                    echo "| üìÅ Files with issues | $TOTAL_FILES |" >> $GITHUB_STEP_SUMMARY
                    echo "| ‚úÖ Clean files | $CLEAN_FILES |" >> $GITHUB_STEP_SUMMARY
                    echo "" >> $GITHUB_STEP_SUMMARY
                    
                    if [ "$ERROR_COUNT" -gt 0 ]; then
                      echo "### ‚ùå Pipeline Stopped" >> $GITHUB_STEP_SUMMARY
                      echo "The pipeline was stopped due to ESLint errors. Please fix the errors before proceeding." >> $GITHUB_STEP_SUMMARY
                    fi
                  else
                    echo "### ‚ùå Error" >> $GITHUB_STEP_SUMMARY
                    echo "Could not process ESLint results. Check your configuration." >> $GITHUB_STEP_SUMMARY
                  fi
    detect-version:
        name: Detect Version
        runs-on: ubuntu-24.04
        permissions:
            contents: read
        outputs:
            version: ${{ steps.get_version.outputs.version }}
            should_build: ${{ steps.check_version.outputs.should_build }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Get Version from package.json
              id: get_version
              run: |
                  if [ ! -f "package.json" ]; then
                    echo "‚ùå package.json not found!"
                    exit 1
                  fi
                  
                  version=$(jq -r .version package.json)
                  if [ "$version" = "null" ] || [ -z "$version" ]; then
                    echo "‚ùå No version found in package.json!"
                    exit 1
                  fi
                  
                  echo "üì¶ Version from package.json: $version"
                  echo "version=$version" >> $GITHUB_OUTPUT

            - name: Check if release exists
              id: check_version
              run: |
                  VERSION="${{ steps.get_version.outputs.version }}"
                  TAG_NAME="v$VERSION"
                  
                  set +e
                  gh release view "$TAG_NAME" >/dev/null 2>&1
                  RELEASE_EXISTS=$?
                  set -e

                  if [ $RELEASE_EXISTS -eq 0 ]; then
                    echo "should_build=false" >> $GITHUB_OUTPUT
                    echo "‚úÖ Release $TAG_NAME already exists - skipping build"
                  else
                    echo "should_build=true" >> $GITHUB_OUTPUT
                    echo "üÜï Release $TAG_NAME doesn't exist - build needed"
                  fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    build-and-push:
        name: Build and Push
        needs: [code-quality, detect-version]
        if: needs.detect-version.outputs.should_build == 'true'
        runs-on: ubuntu-24.04
        permissions:
            contents: read
            packages: write
        outputs:
            version: ${{ needs.detect-version.outputs.version }}
            build_success: ${{ steps.build_result.outputs.success }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Build Info
              run: |
                  echo "üöÄ Starting build for version: ${{ needs.detect-version.outputs.version }}"
                  echo "üìÖ Build triggered at: $(date)"

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REPOSITORY }}
                  username: ${{ secrets.QUAY_ROBOT_USERNAME }}
                  password: ${{ secrets.QUAY_ROBOT_PASSWORD }}

            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY_PATH }}
                  tags: |
                      type=raw,value=latest
                      type=raw,value=${{ needs.detect-version.outputs.version }}

            - name: Build and push Docker image
              id: build_push
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  platforms: linux/amd64
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Verify Build Success
              id: build_result
              run: |
                  VERSION="${{ needs.detect-version.outputs.version }}"
                  echo "‚úÖ Build and push completed!"
                  echo "success=true" >> $GITHUB_OUTPUT
                  echo "üê≥ Image available at: ${{ env.REGISTRY_PATH }}:$VERSION"

    create-release:
        name: Create Release
        needs: [code-quality, detect-version, build-and-push]
        if: needs.detect-version.outputs.should_build == 'true' && needs.build-and-push.outputs.build_success == 'true'
        runs-on: ubuntu-24.04
        permissions:
            contents: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Generate Release Notes
              id: generate_notes
              run: |
                  VERSION="${{ needs.detect-version.outputs.version }}"
                  
                  LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
                  
                  touch release_notes.txt

                  if [ -z "$LAST_TAG" ]; then
                    COMMITS_COUNT=$(git rev-list HEAD --count)
                    AUTHORS=$(git log --pretty=format:"%an" | sort -u | sed 's/.*$/`&`/' | paste -sd ',' | sed 's/,/, /g')
                    COMMITS=$(git log --oneline -10 --pretty=format:"%h %s")
                    echo "Initial release v$VERSION with $COMMITS_COUNT commits by $AUTHORS." >> release_notes.txt
                  else
                    COMMITS_COUNT=$(git rev-list ${LAST_TAG}..HEAD --count)
                    AUTHORS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%an" | sort -u | sed 's/.*$/`&`/' | paste -sd ',' | sed 's/,/, /g')
                    COMMITS=$(git log --oneline ${LAST_TAG}..HEAD --pretty=format:"%h %s")
                    echo "Release v$VERSION includes $COMMITS_COUNT commits since $LAST_TAG by $AUTHORS." >> release_notes.txt
                  fi

                  FEATURE_COMMITS=$(echo "$COMMITS" | grep -iE "\[(add|feat|feature)\]" | sed 's/^/- /' || echo "")
                  if [ -n "$FEATURE_COMMITS" ]; then
                    echo "" >> release_notes.txt
                    echo "### ‚ú® Features" >> release_notes.txt
                    echo "$FEATURE_COMMITS" >> release_notes.txt
                  fi
                  
                  FIX_COMMITS=$(echo "$COMMITS" | grep -iE "\[(fix|bugfix|hotfix)\]" | sed 's/^/- /' || echo "")
                  if [ -n "$FIX_COMMITS" ]; then
                    echo "" >> release_notes.txt
                    echo "### üêõ Bug Fixes" >> release_notes.txt
                    echo "$FIX_COMMITS" >> release_notes.txt
                  fi
                  
                  MAINTENANCE_COMMITS=$(echo "$COMMITS" | grep -iE "\[(version|refactor|chore|style|perf|update|improve)\]" | sed 's/^/- /' || echo "")
                  if [ -n "$MAINTENANCE_COMMITS" ]; then
                    echo "" >> release_notes.txt
                    echo "### üîß Maintenance" >> release_notes.txt
                    echo "$MAINTENANCE_COMMITS" >> release_notes.txt
                  fi
                  
                  DOC_COMMITS=$(echo "$COMMITS" | grep -iE "\[(docs|doc|documentation)\]" | sed 's/^/- /' || echo "")
                  if [ -n "$DOC_COMMITS" ]; then
                    echo "" >> release_notes.txt
                    echo "### üìö Documentation" >> release_notes.txt
                    echo "$DOC_COMMITS" >> release_notes.txt
                  fi

                  OTHER_COMMITS=$(echo "$COMMITS" | grep -viE "\[(add|feat|feature|fix|bugfix|hotfix|version|refactor|chore|style|perf|update|improve|docs|doc|documentation)\]" | sed 's/^/- /' || echo "")
                  if [ -n "$OTHER_COMMITS" ]; then
                    echo "" >> release_notes.txt
                    echo "### üîÑ Other Changes" >> release_notes.txt
                    echo "$OTHER_COMMITS" >> release_notes.txt
                  fi

            - name: Create Release
              run: |
                  VERSION="${{ needs.detect-version.outputs.version }}"
                  TAG_NAME="v$VERSION"
                  RELEASE_TITLE="v$VERSION"
                  
                  gh release create "$TAG_NAME" \
                    --title "$RELEASE_TITLE" \
                    --notes-file release_notes.txt \
                    --latest
                  
                  echo "‚úÖ Release created successfully"
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    cleanup:
        name: Cleanup Summary
        needs: [code-quality, detect-version, build-and-push, create-release]
        if: always() && needs.detect-version.outputs.should_build == 'true'
        runs-on: ubuntu-24.04
        steps:
            - name: Cleanup Summary
              run: |
                  echo "üßπ Cleanup Summary:"
                  echo "  - Code Quality: ${{ needs.code-quality.result }}"
                  echo "  - Build Status: ${{ needs.build-and-push.result }}"
                  echo "  - Release Status: ${{ needs.create-release.result }}"
                  
                  if [ "${{ needs.code-quality.result }}" = "success" ] && [ "${{ needs.build-and-push.result }}" = "success" ] && [ "${{ needs.create-release.result }}" = "success" ]; then
                    echo "‚úÖ Pipeline completed successfully!"
                  else
                    echo "‚ö†Ô∏è Pipeline completed with issues - check previous jobs"
                  fi
